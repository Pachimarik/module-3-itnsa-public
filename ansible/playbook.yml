- hosts: 'all'
  gather_facts: 'no'
  become: 'yes'
  tasks:
############### INSTALL DOCKER AND MODULES #############################
    - name: "Install docker"
      yum:
        name:
          - docker
    
    - name: "Install docker-compose"
      get_url:
        url: https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: +x
  
    - name: "Enable docker"
      systemd:
        state: started
        name: docker
        enabled: yes
        masked: no

    - name: "Install python-pip"
      yum:
        name:
          - python-pip

    - name: "Update pip"
      shell: python2.7 -m pip install --upgrade setuptools && python2.7 -m pip install --upgrade pip

    - name: "Install py module for docker"
      shell: python2.7 -m pip install docker==4.4.4 --ignore-installed && pip install docker-compose

################### INSTALL NGINX ######################################  
    - name: "Install nginx"
      shell: amazon-linux-extras install nginx1 -y

    - name: "Enable nginx"
      systemd:
        name: nginx
        enabled: yes
        masked: no

############## certbot ################
    - name: "Install epel"
      shell: amazon-linux-extras install epel -y
      
    - name: "install certbot"
      yum:
        update_cache: 'yes'
        name:
          - certbot
          - python2-certbot-nginx
################# APP ##################

    - name: "Create folder for app"
      file:
        path: /app
        state: directory

    - name: "Create volume"
      file:
        path: /app/data
        state: directory
        mode: 777
    
    - name: "Move files for app"
      copy: src=../app/{{ item }} dest=/app/
      with_items:
      - app.py
      - docker-compose.yml
      - Dockerfile
      - env.yml
    
    - name: "Create .env"
      copy:
        dest: /app/.env
        content: |
          id={{ lookup('env','COMPETITOR_ID') }}

    - name: "Run docker-compose"
      shell: cd /app && docker-compose up -d

################### firewalld ##################
    - name: "Install firewalld"
      yum:
        name:
          - firewalld
    
    - name: "Firewalld start and enable"
      systemd:
        name: firewalld
        enabled: yes
        state: started
    
    - name: "Add port in public zone"
      firewalld:
        zone: trusted
        interface: eth0
        permanent: yes
        state: enabled
    
    - name: "Permit ssh"
      firewalld:
        zone: public
        service: ssh
        permanent: yes
        state: enabled
    
    - name: "Permit https"
      firewalld:
        zone: public
        service: https
        permanent: yes
        state: enabled
    -

    - name: "Permit http port"
      firewalld:
        zone: public
        port: 80/tcp
        permanent: yes
        state: enabled
    
    - name: "Permit icmp"
      firewalld:
        zone: public
        state: enabled
        permanent: yes
        icmp_block: echo-request

    - name: "Permit 8080 tcp"
      firewalld:
        zone: public
        port: 8080/tcp
        permanent: yes
        state: enabled
    
    - name: "Permit dns"
      firewalld:
        zone: public
        service: dns
        permanent: yes
        state: enabled

############ GLUSTER PORTS ##############
    - name: "Gluster 24007-24008 tcp"
      firewalld:
        zone: public
        port: 24007-24008/tcp
        permanent: yes
        state: enabled
    
    - name: "Gluster 24009-24108"
      firewalld:
        zone: public
        port: 24009-24108/tcp
        permanent: yes
        state: enabled

    - name: "Gluster 49152-49155 tcp"
      firewalld:
        zone: public
        port: 49152-49155/tcp
        permanent: yes
        state: enabled
    
    - name: "Gluster 111 tcp"
      firewalld:
        zone: public
        port: 111/tcp
        permanent: yes
        state: enabled

    - name: "Gluster 111 udp"
      firewalld:
        zone: public
        port: 111/udp
        permanent: yes
        state: enabled

    - name: "Gluster 2049 tcp"
      firewalld:
        zone: public
        port: 2049/tcp
        permanent: yes
        state: enabled
    
    - name: "Restart firewalld"
      systemd:
        name: firewalld
        state: restarted
        daemon_reload: yes

########### REPLICATION ###############
    - name: "Install ncurses-compat-libs"
      yum:
        name:
          - ncurses-compat-libs
    
    - name: "Copy glusterfs repository"
      copy:
        src: ../glusterfs/Gluster.repo
        dest: /etc/yum.repos.d/Gluster.repo

    - name: "disable repo amzn2-core"
      shell:  yum-config-manager --disable amzn2-core
    
    - name: "disable epel repository"
      shell: yum-config-manager --disable epel

    - name: "clear yum all"
      shell: yum clean all

    - name: "Install glusterfs-server"
      yum:
        update_cache: 'yes'
        name:
          - glusterfs-server

    - name: "enable repo amzn2-core"
      shell:  yum-config-manager --enable amzn2-core && yum update -y
    
    - name: "Enable and start gluster"
      systemd:
        name: glusterd
        enabled: yes
        state: started
        masked: no
    
    - name: "Create mountpoint for gluster"
      file:
        path: /rv
        state: directory
    
    - name: "create kostiyl"
      copy:
        dest: /mount.sh
        mode: +x
        content: |
          #!/bin/bash
          mount -a
    
    - name: "record in crontab"
      lineinfile:
        path: /etc/crontab
        line: |
          @reboot root    /mount.sh 

########## env for gluster #########
    - name: "ipnode1"
      shell: host {{ lookup('env','INSTANCE_1') }} | awk '{print $NF}' | sed 's/.$//'
      register: name1

    - name: "ipnode2"
      shell: host {{ lookup('env','INSTANCE_2') }} | awk '{print $NF}' | sed 's/.$//'
      register: name2

    - name: "ipnode3"
      shell: host {{ lookup('env','INSTANCE_3') }} | awk '{print $NF}' | sed 's/.$//'
      register: name3

    - set_fact:
        name1={{ name1.stdout }}
        name2={{ name2.stdout }}
        name3={{ name3.stdout }}

#################### create volume ####################
    - name: "Create gluster volume"
      gluster_volume:
        state: present
        name: datastorage
        bricks: /rv
        replicas: 3
        cluster:
          - "{{ name1 }}"
          - "{{ name2 }}"
          - "{{ name3 }}"
        force: true
      run_once: true